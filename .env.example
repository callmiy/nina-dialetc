# The port on the HOST machine through which the backend server can be accessed
# outside the container. Note that we do not run a server in test environment
# so this variable may not be required in that case
API_PORT=6030

# This is the URL at which the frontend will access the backend server
# For local development, we will use the docker host port
# `$API_PORT` through which our phoenix server is accessed outside
# the container until we are able to figure out how this can be done via
# container hosts
API_URL=http://0.0.0.0:6030

# In some cases, host `0.0.0.0` does not work. So we have the options
API_URL_ALTERNATE=http://localhost:6030

API_HOST=0.0.0.0

# If the application is not being served from the root of the server, then
# the path from which API application is served
API_HOST_PATH=/

SECRET_KEY_BASE=super-secret-text-that-is-long

# The database host is called 'db' because that is the service name in
# docker-compose file
DATABASE_URL=postgres://postgres:postgres@db:5432/example_db

# This must match exactly the database name in $DATABASE_URL
DATABASE_NAME=example_db

POOL_SIZE=10

# must be set to "false" to test docker production build locally
DATABASE_SSL=false

# The port on the HOST machine through which the database server can be accessed
# outside the container
DOCKER_HOST_DATABASE_PORT=127.0.0.1:45442

# When testing production build locally, we may want to create the database
# automatically before phoenix server starts. Please set "false" if
# you do not want database created e.g. running on a heroku server which
# provides a provisioned postgresql database server, this variable must be false
CREATE_DATABASE=false

# The URL that can be used to check for the health of the server. Will be used
# to check that the backend server is up and running and ready to process
# requests before starting the frontend server
API_HEALTH_CHECK_URL=/health

# If 'true', tells API server we are running an end to end test
IS_E2E=false

## DOCKER COMPOSE ############################################################

COMPOSE_PROJECT_NAME=nina-env

# The $USER that we should run as inside the container. It is a best practice
# not to run as root inside the container. However for nodejs applications,
# the application will be run as the standard 'node' user which ships with
# node docker images
DOCKER_HOST_USER_NAME=nina

# The file from which docker compose should read environment variables
# which is actually this file.
DOCKER_ENV_FILE=.env-example

NODE_ENV=development

# The port on the docker host through which web application is accessed.
WEB_PORT=4030

# The URL through which user accesses the application via their browser.
WEB_HOST=http://localhost

## CHOICE OF FRONT AND BACKEND ###############################################

# Value of this environment variable must be the folder name containing the
# frontend code
CLIENT_APP=svelte

# Value of this environment variable must be the folder name containing the
# backend code
API_APP=hapi

## SAPPER DEVELOPMENT #########################################################
SAPPER_RELOAD_PORT=10000

## CYPRESS ####################################################################

# The browser to use for cypress test. In linux, setting up chrome for cypress
# test is easy. So one can simply do `CYPRESS_BROWSER=chrome`. WSL however
# makes it very difficult to set up chrome for cypress tests and it is best
# to leave the CYPRESS_BROWSER environment variable as unset which will then
# use the cypress default of ELECTRON browser
CYPRESS_BROWSER=

# NETLIFY DEPLOYMENT #########################################################

NETLIFY_TOKEN=
